{"ast":null,"code":"import axios from 'axios';\n\nconst authSuccess = (token, userId) => {\n  return {\n    type: \"AUTH_SUCCESS\",\n    payload: {\n      token: token,\n      userId: userId\n    }\n  };\n};\n\nexport const authLoading = isLoading => {\n  return {\n    type: \"AUTH_LOADING\",\n    payload: isLoading\n  };\n};\nexport const authFailed = errMsg => {\n  return {\n    type: \"AUTH_FAILED\",\n    payload: errMsg\n  };\n};\nexport const auth = (email, password, mode) => dispatch => {\n  const authData = {\n    email: email,\n    password: password,\n    returnSecureToken: true\n  };\n  let authUrl = null;\n\n  if (mode === \"Sign Up\") {\n    authUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\";\n  } else {\n    authUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\";\n  }\n\n  const API_KEY = \"AIzaSyBHchSDp_Pobb55t0Qa3aJjwk7vl6xj9Ks\";\n  axios.post(authUrl + API_KEY, authData).then(response => {\n    dispatch(authLoading(false));\n    localStorage.setItem('token', response.data.idToken);\n    localStorage.setItem('userId', response.data.localId);\n    const expirationTime = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem('expirationTime', expirationTime);\n    return response.data;\n  }).then(data => dispatch(authSuccess(data.idToken, data.localId))).catch(err => {\n    dispatch(authLoading(false));\n    dispatch(authFailed(err.response.data.error.message));\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationTime');\n  localStorage.removeItem('userId');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\nexport const authCheck = () => dispatch => {\n  const token = localStorage.getItem('token');\n  console.log(\"yes : \", token);\n\n  if (!token) {\n    dispatch(logout());\n  } else {\n    const expirationTime = new Date(localStorage.getItem('expirationTime'));\n\n    if (expirationTime > new Date()) {\n      const userId = localStorage.getItem('userId');\n      dispatch(authSuccess(token, userId));\n    } else {\n      dispatch(logout());\n    }\n  }\n};","map":{"version":3,"sources":["D:/VS_code_project/React Project Practice/redux-shop/src/store/authActionCreator.js"],"names":["axios","authSuccess","token","userId","type","payload","authLoading","isLoading","authFailed","errMsg","auth","email","password","mode","dispatch","authData","returnSecureToken","authUrl","API_KEY","post","then","response","localStorage","setItem","data","idToken","localId","expirationTime","Date","getTime","expiresIn","catch","err","error","message","logout","removeItem","authCheck","getItem","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst authSuccess = (token, userId) => {\r\n    return {\r\n        type: \"AUTH_SUCCESS\",\r\n        payload: {\r\n            token: token,\r\n            userId: userId\r\n        }\r\n    }\r\n}\r\n\r\nexport const authLoading = (isLoading) => {\r\n    return {\r\n        type: \"AUTH_LOADING\",\r\n        payload: isLoading\r\n    }\r\n}\r\n\r\nexport const authFailed = (errMsg) => {\r\n    return {\r\n        type: \"AUTH_FAILED\",\r\n        payload: errMsg\r\n    }\r\n}\r\n\r\nexport const auth = (email, password, mode) => dispatch => {\r\n\r\n\r\n    const authData = {\r\n        email: email,\r\n        password: password,\r\n        returnSecureToken: true\r\n    }\r\n    let authUrl = null;\r\n    if (mode === \"Sign Up\") {\r\n        authUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\";\r\n    }\r\n    else {\r\n        authUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\";\r\n    }\r\n    const API_KEY = \"AIzaSyBHchSDp_Pobb55t0Qa3aJjwk7vl6xj9Ks\";\r\n    axios.post(authUrl + API_KEY, authData)\r\n        .then(response => {\r\n            dispatch(authLoading(false));\r\n            localStorage.setItem('token', response.data.idToken);\r\n            localStorage.setItem('userId', response.data.localId);\r\n            const expirationTime = new Date(new Date().getTime() + response.data.expiresIn * 1000);\r\n            localStorage.setItem('expirationTime', expirationTime);\r\n            return response.data;\r\n        })\r\n        .then(data => dispatch(authSuccess(data.idToken, data.localId)))\r\n        .catch(err => {\r\n            dispatch(authLoading(false));\r\n            dispatch(authFailed(err.response.data.error.message));\r\n        })\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationTime');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type: \"AUTH_LOGOUT\",\r\n    }\r\n}\r\n\r\nexport const authCheck = () => dispatch => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    console.log(\"yes : \", token);\r\n    if (!token) {\r\n        dispatch(logout());\r\n    }\r\n    else {\r\n        const expirationTime = new Date(localStorage.getItem('expirationTime'));\r\n        if (expirationTime > new Date()) {\r\n            const userId = localStorage.getItem('userId');\r\n            dispatch(authSuccess(token, userId))\r\n        }\r\n        else {\r\n            dispatch(logout());\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}