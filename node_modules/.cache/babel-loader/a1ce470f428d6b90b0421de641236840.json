{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst authSuccess = (token, userId) => {\n  return {\n    type: \"AUTH_SUCCESS\",\n    payload: {\n      token: token,\n      userId: userId\n    }\n  };\n};\n\nconst storeLocally = token => {\n  const decoded = jwt_decode(token);\n  const expTime = decoded.exp;\n  const user_id = decoded.user_id;\n  localStorage.setItem('token', token);\n  localStorage.setItem('userId', user_id);\n  const expirationTime = new Date(expTime * 1000);\n  localStorage.setItem('expirationTime', expirationTime);\n};\n\nexport const auth = (email, password, mode) => dispatch => {\n  const authData = {\n    email: email,\n    password: password\n  };\n  const header = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  let authUrl = null;\n\n  if (mode === \"Sign Up\") {\n    authUrl = \"http://localhost:8000/api/user/\";\n  } else {\n    authUrl = \"http://localhost:8000/api/token/\";\n  }\n\n  axios.post(authUrl, authData, header).then(response => {\n    if (mode !== \"Sign Up\") {\n      const token = response.data.access;\n    }\n\n    return response.data;\n  }).then(data => dispatch(authSuccess(data.idToken, data.localId))).catch(err => {// console.log(\"Something error\");\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationTime');\n  localStorage.removeItem('userId');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\nexport const authCheck = () => dispatch => {\n  const token = localStorage.getItem('token');\n\n  if (!token) {\n    dispatch(logout());\n  } else {\n    const expirationTime = new Date(localStorage.getItem('expirationTime'));\n\n    if (expirationTime > new Date()) {\n      const userId = localStorage.getItem('userId');\n      dispatch(authSuccess(token, userId));\n    } else {\n      dispatch(logout());\n    }\n  }\n};","map":{"version":3,"sources":["D:/VS_code_project/Bohubrihi/React/redux-shop/src/store/authActionCreator.js"],"names":["axios","jwt_decode","authSuccess","token","userId","type","payload","storeLocally","decoded","expTime","exp","user_id","localStorage","setItem","expirationTime","Date","auth","email","password","mode","dispatch","authData","header","headers","authUrl","post","then","response","data","access","idToken","localId","catch","err","logout","removeItem","authCheck","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst authSuccess = (token, userId) => {\r\n    return {\r\n        type: \"AUTH_SUCCESS\",\r\n        payload: {\r\n            token: token,\r\n            userId: userId\r\n        }\r\n    }\r\n}\r\n\r\nconst storeLocally = token =>{\r\n    const decoded = jwt_decode(token);\r\n    const expTime = decoded.exp;\r\n    const user_id = decoded.user_id;\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('userId', user_id);\r\n    const expirationTime = new Date(expTime * 1000);\r\n    localStorage.setItem('expirationTime', expirationTime);\r\n}\r\n\r\n\r\nexport const auth = (email, password, mode) => dispatch => {\r\n\r\n    const authData = {\r\n        email: email,\r\n        password: password,\r\n    }\r\n\r\n    const header = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    }\r\n\r\n    let authUrl = null;\r\n    if (mode === \"Sign Up\") {\r\n        authUrl = \"http://localhost:8000/api/user/\";\r\n    }\r\n    else {\r\n        authUrl = \"http://localhost:8000/api/token/\";\r\n    }\r\n    axios.post(authUrl, authData, header)\r\n        .then(response => {\r\n            if (mode!==\"Sign Up\"){\r\n                const token = response.data.access;\r\n\r\n            }\r\n      \r\n            return response.data;\r\n        })\r\n        .then(data => dispatch(authSuccess(data.idToken, data.localId)))\r\n        .catch(err => {\r\n            // console.log(\"Something error\");\r\n        })\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationTime');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type: \"AUTH_LOGOUT\",\r\n    }\r\n}\r\n\r\nexport const authCheck = () => dispatch => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n        dispatch(logout());\r\n    }\r\n    else {\r\n        const expirationTime = new Date(localStorage.getItem('expirationTime'));\r\n        if (expirationTime > new Date()) {\r\n            const userId = localStorage.getItem('userId');\r\n\r\n            dispatch(authSuccess(token, userId))\r\n        }\r\n        else {\r\n            dispatch(logout());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}